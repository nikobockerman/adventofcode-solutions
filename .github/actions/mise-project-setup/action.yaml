name: mise project setup
description: Setup mise and tools for project directory
inputs:
  cache-mode:
    default: use
    description: "Mode of operation regarding cache: 'prepare' or 'use'"
    required: false
  directory:
    description: Directory where mise and tools will be used in. Must be set to "" if `cache-mode` is "prepare".
    required: true

runs:
  using: composite
  steps:
    - id: init

      env:
        CACHE_MODE: ${{ inputs.cache-mode }}
        DIRECTORY: ${{ inputs.directory }}
        # renovate: datasource=github-releases depName=jdx/mise
        MISE_VERSION: v2025.9.21
      run: |
        # Initialize mise-project-setup action
        "${GITHUB_ACTION_PATH}/init.sh"
      shell: bash

    - id: cache-restore
      name: Mise cache restore
      uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        key: mise-${{ steps.init.outputs.mise-version }}-${{ runner.os }}-${{ hashFiles('mise.toml') }}-${{ hashFiles('aoc-main/mise.toml') }}-${{ hashFiles('solvers/*/mise.toml') }}
        path: ${{ steps.init.outputs.cache-paths }}
        restore-keys: |
          mise-${{ steps.init.outputs.mise-version }}-${{ runner.os }}-${{ hashFiles('mise.toml') }}-${{ hashFiles('aoc-main/mise.toml') }}-
          mise-${{ steps.init.outputs.mise-version }}-${{ runner.os }}-${{ hashFiles('mise.toml') }}-
          mise-${{ steps.init.outputs.mise-version }}-${{ runner.os }}-

    - name: Install mise
      uses: jdx/mise-action@5ac50f778e26fac95da98d50503682459e86d566 # v3.2.0

      env:
        # Action fails on Windows without this as moving from C: to D: fails
        TEMP: ${{ runner.temp }}
      with:
        cache: false
        cache_save: false
        install: false
        version: ${{ steps.init.outputs.mise-version }}
        working_directory: ${{ inputs.directory }}

    - env:
        DIRECTORIES: ${{ steps.init.outputs.mise-install-directories }}
      run: |
        # Set mise trusted config paths

        # Unset MISE_TRUSTED_CONFIG_PATHS for this step
        unset MISE_TRUSTED_CONFIG_PATHS

        envValues=""
        for dir in ${DIRECTORIES}; do
          echo "::group::Set mise trusted config paths: ${dir}"
          pushd "${dir}"
          echo "Show trust status before setting"
          mise trust --show
          echo "Set as trusted"
          mise trust .
          echo "Show trust status after setting"
          mise trust --show
          popd
          echo "::endgroup::"

          if [ -n "${envValues}" ]; then
            envValues="${envValues}:"
          fi
          fullPath=$(realpath .)
          envValues="${envValues}${fullPath}"
        done

        echo "::group::Set mise trusted config paths to environment: ${envValues}"
        {
          echo "MISE_TRUSTED_CONFIG_PATHS=${envValues}"
        } | tee -a "${GITHUB_ENV}"
        echo "::endgroup::"
      shell: bash

    - if: steps.cache-restore.outputs.cache-hit != 'true'

      env:
        DIRECTORIES: ${{ steps.init.outputs.mise-install-directories }}

        # Mise settings for CI
        ## Only use precompiled python binaries
        MISE_PYTHON_COMPILE: false
      run: |
        # Install mise tools

        # Unset in case it is set by an earlier run of this action
        unset UV_PYTHON_DOWNLOADS

        echo "PATH=${PATH}"

        set -x
        for dir in $DIRECTORIES; do
          echo "::group::Install mise tools: $dir"
          pushd "$dir"
          ls -la "${MISE_DATA_DIR}/shims" || true
          mise upgrade
          popd
          echo "::endgroup::"
        done
        set +x

        echo ::group::Mise prune
        mise prune
        echo ::endgroup::
      shell: bash

    - if: inputs.cache-mode == 'prepare' && steps.cache-restore.outputs.cache-hit != 'true'
      name: Save cache
      uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        key: ${{ steps.cache-restore.outputs.cache-primary-key }}
        path: ${{ steps.init.outputs.cache-paths }}

    - env:
        DIRECTORIES: ${{ steps.init.outputs.mise-install-directories }}
      run: |
        # Ensure tools are installed properly

        err=false
        for dir in $DIRECTORIES; do
          echo "::group::Ensure dependencies: $dir"
          pushd "$dir"
          mise ls --current
          count=$(mise ls --current --missing --no-header | wc -l)
          if [ $count -gt 0 ]; then
            echo "::error::Count of missing tools: $count"
            err=true
          else
            echo "Result of check: no missing tools"
          fi
          popd
          echo "::endgroup::"
        done

        if [ "$err" = true ]; then
          exit 1
        fi
      shell: bash

    - run: |
        # Set final changes for rest of workflow

        echo "::group::Environment changes for rest of workflow"
        echo "UV_PYTHON_DOWNLOADS=never" | tee -a "$GITHUB_ENV"
        echo "::endgroup::"
      shell: bash
